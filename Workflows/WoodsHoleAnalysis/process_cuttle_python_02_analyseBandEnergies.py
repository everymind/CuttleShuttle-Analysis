# -*- coding: utf-8 -*-
"""
process_cuttle_python.py

Loads intermediate files generated by process_cuttle_python_02_genBandEnergies.py
Baseline and normalise band energies, pool across animals categorized by catch versus miss

@author: ARK/DK
"""
import os
import glob
import numpy as np
import matplotlib.pyplot as plt
import cv2
import datetime

### FUNCTIONS ###
def categorize_by_animal(TGB_files):
    all_animals_dict = {}
    # collect all canny counts and categorize by animal and type (catch vs miss)
    for TGB_file in TGB_files: 
        TGB_name = os.path.basename(TGB_file)
        TGB_animal = TGB_name.split("_")[1]
        TGB_type = TGB_name.split("_")[4]
        TS_bandEnergies = np.load(TGB_file)
        # extract power at each frequency band for every frame
        all_bands = range(TS_bandEnergies.shape[1])
        power_at_each_frequency = {key:[] for key in all_bands}
        for frame in TS_bandEnergies:
            for band in frame:
                i, = np.where(frame == band)[0]
                power_at_each_frequency[i].append(band)
        all_animals_dict.setdefault(TGB_animal,[]).append(power_at_each_frequency)
    return all_animals_dict

def categorize_by_animal_catchVmiss(TGB_files):
    catch_dict = {}
    miss_dict = {}
    # collect all canny counts and categorize by animal and type (catch vs miss)
    for TGB_file in TGB_files: 
        TGB_name = os.path.basename(TGB_file)
        TGB_animal = TGB_name.split("_")[1]
        TGB_type = TGB_name.split("_")[4]
        TS_bandEnergies = np.load(TGB_file)
        # extract power at each frequency band for every frame
        all_bands = range(TS_bandEnergies.shape[1])
        power_at_each_frequency = {key:[] for key in all_bands}
        for frame in TS_bandEnergies:
            for band in frame:
                i, = np.where(frame == band)[0]
                power_at_each_frequency[i].append(band)
        if TGB_type == "catch":
            catch_dict.setdefault(TGB_animal,[]).append(power_at_each_frequency)
        if TGB_type == "miss": 
            miss_dict.setdefault(TGB_animal,[]).append(power_at_each_frequency)
    return catch_dict, miss_dict

def baseSub_powerAtFreq(TS_dict, prey_type, baseline_len):
    baseSub_TS = {}
    # make baseline for each animal, catch vs miss
    for animal in TS_dict: 
        baseSub_TS[animal] = {}
        try:
            # baseline subtract each frequency during each trial
            allFreq_allTrials_baseSub = {}
            for i,trial in enumerate(TS_dict[animal]):
                for freq_band in trial:
                    baseSub_TS[animal][freq_band] = {}
                    this_freq_baseline = np.nanmean(TS_dict[animal][i][freq_band][0:baseline_len])
                    this_freq_basesubbed = [float(x-this_freq_baseline) for x in TS_dict[animal][i][freq_band]]
                    allFreq_allTrials_baseSub.setdefault(freq_band,[]).append(this_freq_basesubbed)
            for freq_band in allFreq_allTrials_baseSub:
                thisFreq_baseSub_mean_byFrame = np.nanmean(allFreq_allTrials_baseSub[freq_band], axis=0)
                thisFreq_baseSub_mean_bySess = np.nanmean(allFreq_allTrials_baseSub[freq_band])
                thisFreq_baseSub_std_byFrame = np.nanstd(allFreq_allTrials_baseSub[freq_band], axis=0, ddof=1)
                thisFreq_baseSub_std_bySess = np.nanstd(allFreq_allTrials_baseSub[freq_band], ddof=1)
                baseSub_TS[animal][freq_band]['trials'] = allFreq_allTrials_baseSub[freq_band]
                baseSub_TS[animal][freq_band]['mean frame'] = thisFreq_baseSub_mean_byFrame
                baseSub_TS[animal][freq_band]['mean session'] = thisFreq_baseSub_mean_bySess
                baseSub_TS[animal][freq_band]['std frame'] = thisFreq_baseSub_std_byFrame
                baseSub_TS[animal][freq_band]['std session'] = thisFreq_baseSub_std_bySess
        except Exception:
            print("{a} made no tentacle shots during {p} prey movement type".format(a=animal, p=prey_type))
    return baseSub_TS

def zScored_powerAtFreq(Zscore_type, dict_to_Zscore, dict_for_mean_std):
    zScored_dict = {}
    for animal in dict_to_Zscore:
        zScored_dict[animal] = {}
        for freq_band in dict_to_Zscore[animal]:
            zScored_dict[animal][freq_band] = []
            for trial in dict_to_Zscore[animal][freq_band]['trials']:
                trial_array = np.array(trial)
                if Zscore_type=='frame':
                    trial_zscored = (trial_array - dict_for_mean_std[animal][freq_band]['mean frame'])/dict_for_mean_std[animal][freq_band]['std frame']
                if Zscore_type=='session':
                    trial_zscored = []
                    for frame in trial:
                        frame_zscored = (frame - dict_for_mean_std[animal][freq_band]['mean session'])/dict_for_mean_std[animal][freq_band]['std session']
                        trial_zscored.append(frame_zscored)
                zScored_dict[animal][freq_band].append(trial_zscored)
    return zScored_dict

def plot_indiv_animals_each_freq(analysis_type_str, preprocess_str, metric_str, prey_type_str, allA_C_dict, allA_M_dict, TGB_bucket, baseline_len, plots_dir, todays_dt):
    # plot individual animals
    img_type = ['.png', '.pdf']
    for animal in allA_C_dict.keys(): 
        for freq_band in allA_C_dict[animal].keys():
            try:
                if 'Zscored' in preprocess_str:
                    N_catch = len(allA_C_dict[animal][freq_band])
                    N_miss = len(allA_M_dict[animal][freq_band])
                    catches_mean = np.nanmean(allA_C_dict[animal][freq_band], axis=0)
                    misses_mean = np.nanmean(allA_M_dict[animal][freq_band], axis=0)
                    # set fig path and title
                    if len(prey_type_str.split(' '))>1:
                        figure_name = analysis_type_str+'_'+preprocess_str+'_FreqBand'+ str(freq_band)+'_'+prey_type_str.split(' ')[1]+'Trials_'+animal+'_'+todays_dt+img_type[0]
                    else:
                        figure_name = analysis_type_str+'_'+preprocess_str+'_FreqBand'+ str(freq_band)+'_'+prey_type_str+'Trials_'+animal+'_'+todays_dt+img_type[0]
                    figure_path = os.path.join(plots_dir, figure_name)
                    figure_title = 'Z-scored mean change from baseline of {m} {fb} in ROI on cuttlefish mantle during tentacle shots, as detected by {at}\n Individual trials plotted with more transparent traces \n Baseline: mean of {m} from t=0 to t={b} seconds \n Prey Movement type: {p}, Animal: {a}\n Number of catches: {Nc}, Number of misses: {Nm}'.format(m=metric_str, fb=freq_band, at=analysis_type_str, b=str(baseline_len/60), p=prey_type_str, a=animal, Nc=str(N_catch), Nm=str(N_miss))
                    # setup fig
                    plt.figure(figsize=(16,9), dpi=200)
                    plt.suptitle(figure_title, fontsize=12, y=0.99)
                    plt.ylabel("Change from baseline in power")
                    plot_xticks = np.arange(0, len(allA_C_dict[animal][freq_band][0]), step=60)
                    plt.xticks(plot_xticks, ['%.1f'%(x/60) for x in plot_xticks])
                    #plt.xlim(0,180)
                    plt.ylim(-6, 6)
                    plt.xlabel("Seconds")
                    plt.grid(b=True, which='major', linestyle='-')
                    # plot z-scored power at frequency band
                    for trial in allA_M_dict[animal][freq_band]:
                        plt.plot(trial, linewidth=1, color=[1.0, 0.0, 0.0, 0.1])
                    for trial in allA_C_dict[animal][freq_band]:
                        plt.plot(trial, linewidth=1, color=[0.0, 0.0, 1.0, 0.1])
                    plt.plot(misses_mean.T, linewidth=2, color=[1.0, 0.0, 0.0, 0.8], label='Miss')
                    #plt.fill_between(range(len(allA_M_dict_mean[animal])), misses_mean-canny_std_miss, misses_mean+canny_std_miss, color=[1.0, 0.0, 0.0, 0.1])
                    plt.plot(catches_mean.T, linewidth=2, color=[0.0, 0.0, 1.0, 0.8], label='Catch')
                    #plt.fill_between(range(len(allA_C_dict_mean[animal])), catches_mean-canny_std_catch, catches_mean+canny_std_catch, color=[0.0, 0.0, 1.0, 0.1])
                    # plot events
                    ymin, ymax = plt.ylim()
                    plt.plot((baseline_len, baseline_len), (ymin, ymax), 'm--', linewidth=1)
                    plt.text(baseline_len, ymax-0.8, "End of \nbaseline period", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='magenta', boxstyle='round,pad=0.35'))
                    plt.plot((TGB_bucket, TGB_bucket), (ymin, ymax), 'g--', linewidth=1)
                    plt.text(TGB_bucket, ymax-0.5, "Tentacles Go Ballistic\n(TGB)", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='green', boxstyle='round,pad=0.35'))
                    plt.legend(loc='upper left')
                    # save fig
                    plt.savefig(figure_path)
                    plt.show(block=False)
                    plt.pause(1)
                    plt.close()
                else:
                    if animal in allA_C_dict:
                        N_catch = len(allA_C_dict[animal][freq_band]['trials'])
                        catches_mean = np.nanmean(allA_C_dict[animal][freq_band]['trials'], axis=0)
                    if animal in allA_M_dict:
                        N_miss = len(allA_M_dict[animal][freq_band]['trials'])
                        misses_mean = np.nanmean(allA_M_dict[animal][freq_band]['trials'], axis=0)
                    # set fig path and title
                    figure_name = analysis_type_str+'_'+preprocess_str+'_FreqBand'+ str(freq_band)+'_'+ prey_type_str.split(' ')[1]+'Trials_'+animal+"_"+todays_dt+img_type[0]
                    figure_path = os.path.join(plots_dir, figure_name)
                    figure_title = 'Baseline subtracted mean change from baseline of {m} {fb} in ROI on cuttlefish mantle during tentacle shots, as detected by {at}\n Individual trials plotted with more transparent traces \n Baseline: mean of {m} from t=0 to t={b} seconds \n Prey Movement type: {p}, Animal: {a}\n Number of catches: {Nc}, Number of misses: {Nm}'.format(m=metric_str, fb=freq_band, at=analysis_type_str, b=str(baseline_len/60), p=prey_type_str, a=animal, Nc=str(N_catch), Nm=str(N_miss))
                    # setup fig
                    plt.figure(figsize=(16,9), dpi=200)
                    plt.suptitle(figure_title, fontsize=12, y=0.99)
                    plt.ylabel("Change from baseline in power")
                    plot_xticks = np.arange(0, len(allA_C_dict[animal][freq_band]['trials'][0]), step=60)
                    plt.xticks(plot_xticks, ['%.1f'%(x/60) for x in plot_xticks])
                    #plt.xlim(0,180)
                    #plt.ylim(-6, 6)
                    plt.xlabel("Seconds")
                    plt.grid(b=True, which='major', linestyle='-')
                    # plot z-scored power at frequency band
                    if animal in allA_M_dict:
                        for trial in allA_M_dict[animal][freq_band]['trials']:
                            plt.plot(trial, linewidth=1, color=[1.0, 0.0, 0.0, 0.1])
                    if animal in allA_C_dict:
                        for trial in allA_C_dict[animal][freq_band]['trials']:
                            plt.plot(trial, linewidth=1, color=[0.0, 0.0, 1.0, 0.1])
                    if animal in allA_M_dict:
                        plt.plot(misses_mean.T, linewidth=2, color=[1.0, 0.0, 0.0, 0.8], label='Miss')
                    if animal in allA_C_dict:
                        plt.plot(catches_mean.T, linewidth=2, color=[0.0, 0.0, 1.0, 0.8], label='Catch')
                    # plot events
                    ymin, ymax = plt.ylim()
                    plt.plot((baseline_len, baseline_len), (ymin, ymax), 'm--', linewidth=1)
                    plt.text(baseline_len, ymax-ymax/10, "End of \nbaseline period", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='magenta', boxstyle='round,pad=0.35'))
                    plt.plot((TGB_bucket, TGB_bucket), (ymin, ymax), 'g--', linewidth=1)
                    plt.text(TGB_bucket, ymax-ymax/20, "Tentacles Go Ballistic\n(TGB)", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='green', boxstyle='round,pad=0.35'))
                    plt.legend(loc='upper left')
                    # save fig
                    plt.savefig(figure_path)
                    plt.show(block=False)
                    plt.pause(1)
                    plt.close()
            except Exception:
                plt.close()
                print("{a} did not make any catches and/or misses during {p} prey movement".format(a=animal,p=prey_type_str))


### BEGIN ANALYSIS ###
# grab today's date
now = datetime.datetime.now()
todays_datetime = datetime.datetime.today().strftime('%Y%m%d-%H%M%S')
cwd = os.getcwd()
# source data and output locations
data_folder = r'C:\Users\taunsquared\Dropbox\CuttleShuttle\analysis\WoodsHoleAnalysis\data'
plots_folder = r'C:\Users\taunsquared\Dropbox\CuttleShuttle\analysis\WoodsHoleAnalysis\plots'
# from data folder, collect all binary files with power-at-freq-band data
all_data = glob.glob(data_folder + os.sep + "*.npy")

########################################################
### ------ ORGANIZE DATA ------ ###
########################################################
# categorize tentacle shots according to prey movement
TGB_natural = []
TGB_patterned = []
TGB_causal = []
TGB_daily = {}
for TGB_file in all_data: 
    trial_date = os.path.basename(TGB_file).split('_')[2]
    sorted_by_session = TGB_daily.setdefault(trial_date,[]).append(TGB_file)
    trial_datetime = datetime.datetime.strptime(trial_date, '%Y-%m-%d')
    if trial_datetime < datetime.datetime(2014, 9, 13, 0, 0):
        TGB_natural.append(TGB_file)
    elif trial_datetime > datetime.datetime(2014, 10, 18, 0, 0):
        TGB_causal.append(TGB_file)
    else: 
        TGB_patterned.append(TGB_file)

# organize power-at-frequency-band data
# categorize daily sessions by animal
all_TS_daily = {}
all_catches_daily = {}
all_misses_daily = {}
for session_date in TGB_daily:
    all_TS_daily[session_date] = categorize_by_animal(TGB_daily[session_date])
    all_catches_daily[session_date], all_misses_daily[session_date] = categorize_by_animal_catchVmiss(TGB_daily[session_date])

# collect all power-at-frequency-band data and categorize by animal
all_TS = categorize_by_animal(all_data)
# collect all power-at-frequency-band data and categorize by animal and type (catch vs miss)
all_catches, all_misses = categorize_by_animal_catchVmiss(all_data)
# organize by prey type
all_raw = [all_catches, all_misses]
# time bin for moment tentacles go ballistic
TGB_bucket_raw = 180

########################################################
### ------ DATA NORMALIZATION/STANDARDIZATION ------ ###
########################################################
# baseline subtraction
baseline_frames = 150 #frames
# baseline subtract, all TS
dailyTS_baseSub = {}
for session_date in all_TS_daily:
    dailyTS_baseSub[session_date] = baseSub_powerAtFreq(all_TS_daily[session_date], 'all', baseline_frames)
allTS_baseSub = baseSub_powerAtFreq(all_TS, 'all', baseline_frames)
# baseline subtract, catch vs miss
dailyCatches_baseSub = {}
dailyMisses_baseSub = {}
for session_date in all_catches_daily:
    dailyCatches_baseSub[session_date] = baseSub_powerAtFreq(all_catches_daily[session_date], 'all', baseline_frames)
for session_date in all_misses_daily:
    dailyMisses_baseSub[session_date] = baseSub_powerAtFreq(all_misses_daily[session_date], 'all', baseline_frames)
allCatches_baseSub = baseSub_powerAtFreq(all_catches, 'all', baseline_frames)
allMisses_baseSub = baseSub_powerAtFreq(all_misses, 'all', baseline_frames)
# zscore each animal so that I can pool all trials into a "superanimal"
allTS_baseSub_Zscored = zScored_powerAtFreq('frame', allTS_baseSub, allTS_baseSub)
allCatches_baseSub_Zscored_Frame = zScored_powerAtFreq('frame', allCatches_baseSub, allTS_baseSub)
allMisses_baseSub_Zscored_Frame = zScored_powerAtFreq('frame', allMisses_baseSub, allTS_baseSub)
allTS_baseSub_Zscored_Frame_Sess = zScored_powerAtFreq('session', allTS_baseSub, allTS_baseSub)
allCatches_baseSub_Zscored_Sess = zScored_powerAtFreq('session', allCatches_baseSub, allTS_baseSub)
allMisses_baseSub_Zscored_Sess = zScored_powerAtFreq('session', allMisses_baseSub, allTS_baseSub)
# zscore daily sessions for each animal to characterize session dynamics
dailyTS_baseSub_Zscored_Sess = {}
for session_date in dailyTS_baseSub:
    dailyTS_baseSub_Zscored_Sess[session_date] = zScored_powerAtFreq('session', dailyTS_baseSub[session_date], dailyTS_baseSub[session_date])
dailyCatches_baseSub_Zscored_Sess = {}
dailyMisses_baseSub_Zscored_Sess = {}
for session_date in dailyCatches_baseSub:
    dailyCatches_baseSub_Zscored_Sess[session_date] = zScored_powerAtFreq('session', dailyCatches_baseSub[session_date], dailyTS_baseSub[session_date])
for session_date in dailyMisses_baseSub:
    dailyMisses_baseSub_Zscored_Sess[session_date] = zScored_powerAtFreq('session', dailyMisses_baseSub[session_date], dailyTS_baseSub[session_date])

#######################################################
### ------------ PLOT THE ZSCORED DATA ------------ ###
#######################################################

## individual animals
plot_indiv_animals_each_freq('ProcessCuttlePython', 'Zscored_Frame_BaseSub', 'power at frequency band', 'all', allCatches_baseSub_Zscored_Frame, allMisses_baseSub_Zscored_Frame, TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)
plot_indiv_animals_each_freq('ProcessCuttlePython', 'Zscored_Sess_BaseSub', 'power at frequency band', 'all', allCatches_baseSub_Zscored_Sess, allMisses_baseSub_Zscored_Sess, TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)

# sanity check
for session_date in dailyTS_baseSub:
    plot_indiv_animals('ProcessCuttlePython', 'BaseSub', 'power at frequency band', 'all '+session_date, dailyCatches_baseSub[session_date], dailyMisses_baseSub[session_date], TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)
    plot_indiv_animals('ProcessCuttlePython', 'Zscored_Sess_Basesub', 'power at frequency band', 'all '+session_date, dailyCatches_baseSub_Zscored_Sess[session_date], dailyMisses_baseSub_Zscored_Sess[session_date], TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)






# FIN