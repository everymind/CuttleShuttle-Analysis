# -*- coding: utf-8 -*-
"""
process_cuttle_python.py

Loads intermediate files generated by process_cuttle_python_02_genBandEnergies.py
Baseline and normalise band energies, pool across animals categorized by catch versus miss

@author: ARK/DK
"""
import os
import glob
import numpy as np
import matplotlib.pyplot as plt
import cv2
import datetime

### FUNCTIONS ###
def categorize_by_animal(TGB_files):
    all_animals_dict = {}
    # collect all canny counts and categorize by animal and type (catch vs miss)
    for TGB_file in TGB_files: 
        TGB_name = os.path.basename(TGB_file)
        TGB_animal = TGB_name.split("_")[1]
        TGB_type = TGB_name.split("_")[4]
        TS_bandEnergies = np.load(TGB_file)
        # extract power at each frequency band for every frame
        all_bands = range(TS_bandEnergies.shape[1])
        power_at_each_frequency = {key:[] for key in all_bands}
        for frame in TS_bandEnergies:
            for band in frame:
                i, = np.where(frame == band)[0]
                power_at_each_frequency[i].append(band)
        all_animals_dict.setdefault(TGB_animal,[]).append(power_at_each_frequency)
    return all_animals_dict

def categorize_by_animal_catchVmiss(TGB_files):
    catch_dict = {}
    miss_dict = {}
    # collect all canny counts and categorize by animal and type (catch vs miss)
    for TGB_file in TGB_files: 
        TGB_name = os.path.basename(TGB_file)
        TGB_animal = TGB_name.split("_")[1]
        TGB_type = TGB_name.split("_")[4]
        TS_bandEnergies = np.load(TGB_file)
        # extract power at each frequency band for every frame
        all_bands = range(TS_bandEnergies.shape[1])
        power_at_each_frequency = {key:[] for key in all_bands}
        for frame in TS_bandEnergies:
            for band in frame:
                i, = np.where(frame == band)[0]
                power_at_each_frequency[i].append(band)
        if TGB_type == "catch":
            catch_dict.setdefault(TGB_animal,[]).append(power_at_each_frequency)
        if TGB_type == "miss": 
            miss_dict.setdefault(TGB_animal,[]).append(power_at_each_frequency)
    return catch_dict, miss_dict

def baseSub_powerAtFreq(TS_dict, prey_type, baseline_len):
    baseSub_TS = {}
    # make baseline for each animal, catch vs miss
    for animal in TS_dict: 
        baseSub_TS[animal] = {}
        try:
            # baseline subtract each frequency during each trial
            allFreq_allTrials_baseSub = {}
            for i,trial in enumerate(TS_dict[animal]):
                for freq_band in trial:
                    baseSub_TS[animal][freq_band] = {}
                    this_freq_baseline = np.nanmean(TS_dict[animal][i][freq_band][0:baseline_len])
                    this_freq_basesubbed = [float(x-this_freq_baseline) for x in TS_dict[animal][i][freq_band]]
                    allFreq_allTrials_baseSub.setdefault(freq_band,[]).append(this_freq_basesubbed)
            for freq_band in allFreq_allTrials_baseSub:
                thisFreq_baseSub_mean_byFrame = np.nanmean(allFreq_allTrials_baseSub[freq_band], axis=0)
                thisFreq_baseSub_mean_bySess = np.nanmean(allFreq_allTrials_baseSub[freq_band])
                thisFreq_baseSub_std_byFrame = np.nanstd(allFreq_allTrials_baseSub[freq_band], axis=0, ddof=1)
                thisFreq_baseSub_std_bySess = np.nanstd(allFreq_allTrials_baseSub[freq_band], ddof=1)
                baseSub_TS[animal][freq_band]['trials'] = allFreq_allTrials_baseSub[freq_band]
                baseSub_TS[animal][freq_band]['mean frame'] = thisFreq_baseSub_mean_byFrame
                baseSub_TS[animal][freq_band]['mean session'] = thisFreq_baseSub_mean_bySess
                baseSub_TS[animal][freq_band]['std frame'] = thisFreq_baseSub_std_byFrame
                baseSub_TS[animal][freq_band]['std session'] = thisFreq_baseSub_std_bySess
        except Exception:
            print("{a} made no tentacle shots during {p} prey movement type".format(a=animal, p=prey_type))
    return baseSub_TS

def zScored_powerAtFreq(Zscore_type, dict_to_Zscore, dict_for_mean_std):
    zScored_dict = {}
    for animal in dict_to_Zscore:
        zScored_dict[animal] = {}
        for freq_band in dict_to_Zscore[animal]:
            zScored_dict[animal][freq_band] = []
            for trial in dict_to_Zscore[animal][freq_band]['trials']:
                trial_array = np.array(trial)
                if Zscore_type=='frame':
                    trial_zscored = (trial_array - dict_for_mean_std[animal][freq_band]['mean frame'])/dict_for_mean_std[animal][freq_band]['std frame']
                if Zscore_type=='session':
                    trial_zscored = []
                    for frame in trial:
                        frame_zscored = (frame - dict_for_mean_std[animal][freq_band]['mean session'])/dict_for_mean_std[animal][freq_band]['std session']
                        trial_zscored.append(frame_zscored)
                zScored_dict[animal][freq_band].append(trial_zscored)
    return zScored_dict

def plot_indiv_animals_each_freq(analysis_type_str, preprocess_str, metric_str, prey_type_str, allA_C_dict, allA_M_dict, TGB_bucket, baseline_len, plots_dir, todays_dt):
    # plot individual animals
    img_type = ['.png', '.pdf']
    for animal in allA_C_dict.keys(): 
        for freq_band in allA_C_dict[animal].keys():
            try:
                if 'Zscored' in preprocess_str:
                    N_catch = len(allA_C_dict[animal][freq_band])
                    N_miss = len(allA_M_dict[animal][freq_band])
                    catches_mean = np.nanmean(allA_C_dict[animal][freq_band], axis=0)
                    misses_mean = np.nanmean(allA_M_dict[animal][freq_band], axis=0)
                    # set fig path and title
                    if len(prey_type_str.split(' '))>1:
                        figure_name = analysis_type_str+'_'+preprocess_str+'_'+animal+'_FreqBand'+ str(freq_band)+'_'+prey_type_str.split(' ')[1]+'Trials_'+todays_dt+img_type[0]
                    else:
                        figure_name = analysis_type_str+'_'+preprocess_str+'_'+animal+'_FreqBand'+ str(freq_band)+'_'+prey_type_str+'Trials_'+todays_dt+img_type[0]
                    figure_path = os.path.join(plots_dir, figure_name)
                    figure_title = 'Z-scored mean change from baseline of {m} {fb} in ROI on cuttlefish mantle during tentacle shots, as detected by {at}\n Individual trials plotted with more transparent traces \n Baseline: mean of {m} from t=0 to t={b} seconds \n Prey Movement type: {p}, Animal: {a}\n Number of catches: {Nc}, Number of misses: {Nm}'.format(m=metric_str, fb=freq_band, at=analysis_type_str, b=str(baseline_len/60), p=prey_type_str, a=animal, Nc=str(N_catch), Nm=str(N_miss))
                    # setup fig
                    plt.figure(figsize=(16,9), dpi=200)
                    plt.suptitle(figure_title, fontsize=12, y=0.99)
                    plt.ylabel("Change from baseline in power")
                    plot_xticks = np.arange(0, len(allA_C_dict[animal][freq_band][0]), step=60)
                    plt.xticks(plot_xticks, ['%.1f'%(x/60) for x in plot_xticks])
                    #plt.xlim(0,180)
                    plt.ylim(-6, 6)
                    plt.xlabel("Seconds")
                    plt.grid(b=True, which='major', linestyle='-')
                    # plot z-scored power at frequency band
                    for trial in allA_M_dict[animal][freq_band]:
                        plt.plot(trial, linewidth=1, color=[1.0, 0.0, 0.0, 0.1])
                    for trial in allA_C_dict[animal][freq_band]:
                        plt.plot(trial, linewidth=1, color=[0.0, 0.0, 1.0, 0.1])
                    plt.plot(misses_mean.T, linewidth=2, color=[1.0, 0.0, 0.0, 0.8], label='Miss')
                    #plt.fill_between(range(len(allA_M_dict_mean[animal])), misses_mean-canny_std_miss, misses_mean+canny_std_miss, color=[1.0, 0.0, 0.0, 0.1])
                    plt.plot(catches_mean.T, linewidth=2, color=[0.0, 0.0, 1.0, 0.8], label='Catch')
                    #plt.fill_between(range(len(allA_C_dict_mean[animal])), catches_mean-canny_std_catch, catches_mean+canny_std_catch, color=[0.0, 0.0, 1.0, 0.1])
                    # plot events
                    ymin, ymax = plt.ylim()
                    plt.plot((baseline_len, baseline_len), (ymin, ymax), 'm--', linewidth=1)
                    plt.text(baseline_len, ymax-0.8, "End of \nbaseline period", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='magenta', boxstyle='round,pad=0.35'))
                    plt.plot((TGB_bucket, TGB_bucket), (ymin, ymax), 'g--', linewidth=1)
                    plt.text(TGB_bucket, ymax-0.5, "Tentacles Go Ballistic\n(TGB)", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='green', boxstyle='round,pad=0.35'))
                    plt.legend(loc='upper left')
                    # save fig
                    plt.savefig(figure_path)
                    plt.show(block=False)
                    plt.pause(1)
                    plt.close()
                else:
                    if animal in allA_C_dict:
                        N_catch = len(allA_C_dict[animal][freq_band]['trials'])
                        catches_mean = np.nanmean(allA_C_dict[animal][freq_band]['trials'], axis=0)
                    if animal in allA_M_dict:
                        N_miss = len(allA_M_dict[animal][freq_band]['trials'])
                        misses_mean = np.nanmean(allA_M_dict[animal][freq_band]['trials'], axis=0)
                    # set fig path and title
                    figure_name = analysis_type_str+'_'+preprocess_str+'_FreqBand'+ str(freq_band)+'_'+ prey_type_str.split(' ')[1]+'Trials_'+animal+"_"+todays_dt+img_type[0]
                    figure_path = os.path.join(plots_dir, figure_name)
                    figure_title = 'Baseline subtracted mean change from baseline of {m} {fb} in ROI on cuttlefish mantle during tentacle shots, as detected by {at}\n Individual trials plotted with more transparent traces \n Baseline: mean of {m} from t=0 to t={b} seconds \n Prey Movement type: {p}, Animal: {a}\n Number of catches: {Nc}, Number of misses: {Nm}'.format(m=metric_str, fb=freq_band, at=analysis_type_str, b=str(baseline_len/60), p=prey_type_str, a=animal, Nc=str(N_catch), Nm=str(N_miss))
                    # setup fig
                    plt.figure(figsize=(16,9), dpi=200)
                    plt.suptitle(figure_title, fontsize=12, y=0.99)
                    plt.ylabel("Change from baseline in power")
                    plot_xticks = np.arange(0, len(allA_C_dict[animal][freq_band]['trials'][0]), step=60)
                    plt.xticks(plot_xticks, ['%.1f'%(x/60) for x in plot_xticks])
                    #plt.xlim(0,180)
                    #plt.ylim(-6, 6)
                    plt.xlabel("Seconds")
                    plt.grid(b=True, which='major', linestyle='-')
                    # plot z-scored power at frequency band
                    if animal in allA_M_dict:
                        for trial in allA_M_dict[animal][freq_band]['trials']:
                            plt.plot(trial, linewidth=1, color=[1.0, 0.0, 0.0, 0.1])
                    if animal in allA_C_dict:
                        for trial in allA_C_dict[animal][freq_band]['trials']:
                            plt.plot(trial, linewidth=1, color=[0.0, 0.0, 1.0, 0.1])
                    if animal in allA_M_dict:
                        plt.plot(misses_mean.T, linewidth=2, color=[1.0, 0.0, 0.0, 0.8], label='Miss')
                    if animal in allA_C_dict:
                        plt.plot(catches_mean.T, linewidth=2, color=[0.0, 0.0, 1.0, 0.8], label='Catch')
                    # plot events
                    ymin, ymax = plt.ylim()
                    plt.plot((baseline_len, baseline_len), (ymin, ymax), 'm--', linewidth=1)
                    plt.text(baseline_len, ymax-ymax/10, "End of \nbaseline period", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='magenta', boxstyle='round,pad=0.35'))
                    plt.plot((TGB_bucket, TGB_bucket), (ymin, ymax), 'g--', linewidth=1)
                    plt.text(TGB_bucket, ymax-ymax/20, "Tentacles Go Ballistic\n(TGB)", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='green', boxstyle='round,pad=0.35'))
                    plt.legend(loc='upper left')
                    # save fig
                    plt.savefig(figure_path)
                    plt.show(block=False)
                    plt.pause(1)
                    plt.close()
            except Exception:
                plt.close()
                print("{a} did not make any catches and/or misses during {p} prey movement".format(a=animal,p=prey_type_str))

def pool_acrossA_keepTemporalStructure_eachFreq(catches_dict, misses_dict, frame_start, frame_end, prey_type_str):
    pooled_catches = {}
    pooled_misses = {}
    pooled_catches_Ntrials = 0
    pooled_misses_Ntrials = 0
    for animal in catches_dict:
        thisA_catchesN = len(catches_dict[animal][0])
        pooled_catches_Ntrials = pooled_catches_Ntrials + thisA_catchesN
        thisA_missesN = len(misses_dict[animal][0])
        pooled_misses_Ntrials = pooled_misses_Ntrials + thisA_missesN
        for freq_band in catches_dict[animal]:
            if thisA_catchesN != 0:
                for trial in catches_dict[animal][freq_band]:
                    if frame_end == -1:
                        pooled_catches.setdefault(freq_band,[]).append(trial[frame_start:])
                    else:     
                        pooled_catches.setdefault(freq_band,[]).append(trial[frame_start:frame_end])
            else:
                print('{a} made no catch tentacle shots during {p} prey movement'.format(a=animal, p=prey_type_str))
            if thisA_missesN != 0:
                for trial in misses_dict[animal][freq_band]:
                    if frame_end == -1:
                        pooled_misses.setdefault(freq_band,[]).append(trial[frame_start:])
                    else:     
                        pooled_misses.setdefault(freq_band,[]).append(trial[frame_start:frame_end])
            else:
                print('{a} made no miss tentacle shots during {p} prey movement'.format(a=animal, p=prey_type_str))
    return pooled_catches, pooled_catches_Ntrials, pooled_misses, pooled_misses_Ntrials

def shuffle_test(Group1, Group2, N_Shuffles, Group1_str, Group2_str, Group1_N, Group2_N, plot_on, plots_dir, todays_dt):
    # Observed performance
    OPerf = np.nanmean(Group1) - np.nanmean(Group2)
    # Shuffle the dataset and compare means again
    num_of_shuffles = N_Shuffles
    SPerf = np.zeros((num_of_shuffles,1))
    All_Group = np.concatenate([Group1, Group2])
    for shuff in range(num_of_shuffles):
        shuff_response = np.random.permutation(All_Group)
        SPerf[shuff] = np.nanmean(shuff_response[0:len(Group1)]) - np.nanmean(shuff_response[len(Group1):])
    # p-value of shuffle test
    pVal = np.nanmean(SPerf**2 >= OPerf**2)
    # sigma
    shuffled_mean = np.nanmean(SPerf)
    sigma_shuff = np.nanstd(SPerf, ddof=1)
    shuff_975p = np.percentile(SPerf, 97.5)
    shuff_025p = np.percentile(SPerf, 2.5)
    if plot_on == True:
        # show histogram of diffs of shuffled means
        figure_name = 'ShuffleTest_'+ Group1_str + '_' + Group2_str + '_' + todays_dt + '.png'
        figure_path = os.path.join(plots_dir, figure_name)
        figure_title = "Histogram of the differences in means of randomly labeled data, Number of shuffles = {Ns}\n Group 1: {G1}, N = {G1N}\n Group 2: {G2}, N = {G2N}\n P-value of shuffle test: {p:.4f}, Mean of shuffle test: {m:.4f}, Sigma of shuffle test: {s:.4f}".format(Ns=N_Shuffles, G1=Group1_str, G1N=Group1_N, G2=Group2_str, G2N=Group2_N, p=pVal, m=shuffled_mean, s=sigma_shuff)
        plt.figure(figsize=(16,9), dpi=200)
        plt.suptitle(figure_title, fontsize=12, y=0.98)
        plt.hist(SPerf)
        ymin, ymax = plt.ylim()
        xmin, xmax = plt.xlim()
        plt.plot((shuff_025p, shuff_025p), (ymin, ymax/2), 'r-', linewidth=1)
        plt.plot(shuff_025p, ymax/2, 'ro')
        plt.text(shuff_025p, ymax/2-ymax/20, '2.5 percentile:\n'+'%.4f'%(shuff_025p), fontsize='x-small', ha='right', bbox=dict(facecolor='white', edgecolor='red', boxstyle='round,pad=0.35'))
        plt.plot((shuff_975p, shuff_975p), (ymin, ymax/2), 'r-', linewidth=1)
        plt.plot(shuff_975p, ymax/2, 'ro')
        plt.text(shuff_975p, ymax/2-ymax/20, '97.5 percentile:\n'+'%.4f'%(shuff_975p), fontsize='x-small', ha='left', bbox=dict(facecolor='white', edgecolor='red', boxstyle='round,pad=0.35'))
        plt.plot((OPerf, OPerf), (ymin, ymax), 'g--', linewidth=1)
        plt.text(OPerf, ymax-5, "Difference of Labeled Means = " + str(OPerf), fontsize='x-small', ha='center', bbox=dict(facecolor='white', edgecolor='green', boxstyle='round,pad=0.35'))
        plt.savefig(figure_path)
        plt.show(block=False)
        plt.pause(1)
        plt.close()
    return SPerf, pVal, shuffled_mean

def find_bounds_for_sig(shuffle_test_results_dict, UpBound, LowBound):
    upperbound = []
    lowerbound = []
    for frame in sorted(shuffle_test_results_dict.keys()):
        upperbound.append(np.percentile(shuffle_test_results_dict[frame]['SPerf'], UpBound))
        lowerbound.append(np.percentile(shuffle_test_results_dict[frame]['SPerf'], LowBound))
    return upperbound, lowerbound

def gen_shuffled_traces(Group1, Group2, N_Shuffles, Group1_N, Group2_N):
    # Shuffle the dataset and compare means again
    num_of_shuffles = N_Shuffles
    SPerf = np.zeros((num_of_shuffles,1))
    All_Group = np.concatenate([Group1, Group2])
    for shuff in range(num_of_shuffles):
        shuff_response = np.random.permutation(All_Group)
        SPerf[shuff] = np.nanmean(shuff_response[0:len(Group1)]) - np.nanmean(shuff_response[len(Group1):])
    # sigma
    return SPerf

def check_violations_sigBounds(shuffDiffMeansTraces, sig_upperBound, sig_lowerBound):
    outOfBounds_upper = 0
    outOfBounds_lower = 0
    for trial in shuffDiffMeansTraces:
        num_crossings_UB = 0
        num_crossings_LB = 0
        for x in range(len(trial)):
            if trial[x]>sig_upperBound[x]:
                num_crossings_UB += 1
            if trial[x]<sig_lowerBound[x]:
                num_crossings_LB += 1
        if num_crossings_UB>0:
            outOfBounds_upper += 1
        if num_crossings_LB>0:
            outOfBounds_lower += 1
    return outOfBounds_upper, outOfBounds_lower

def plot_allA_allFreq_Zscored_ShuffledDiffMeans(analysis_type_str, preprocess_str, metric_str, prey_type_str, catches_dict, misses_dict, sigUB, sigLB, sigUB_corrected, sigLB_corrected, shuffDiff, firstSigFrame, TGB_bucket, baseline_len, plots_dir, todays_dt): 
    img_type = ['.png', '.pdf']
    ### POOL ACROSS ANIMALS ### 
    allA_C_allFreq = {}
    allA_C_N = {}
    allA_M_allFreq = {}
    allA_M_N = {}
    for animal in catches_dict.keys():
        for freq_band in catches_dict[animal].keys():
            thisA_C_N = len(catches_dict[animal][freq_band])
            if thisA_C_N != 0:
                allA_C_N[freq_band] = allA_C_N.setdefault(freq_band,0) + thisA_C_N
                for trial in catches_dict[animal][freq_band]:
                    allA_C_allFreq.setdefault(freq_band,[]).append(trial)
    for animal in misses_dict.keys():
        for freq_band in misses_dict[animal].keys():
            thisA_M_N = len(misses_dict[animal][freq_band])
            if thisA_M_N != 0:
                allA_M_N[freq_band] = allA_M_N.setdefault(freq_band,0) + thisA_M_N
                for trial in misses_dict[animal][freq_band]:
                    allA_M_allFreq.setdefault(freq_band,[]).append(trial)
    allA_C_allF_mean = {}
    allA_C_allF_std = {}
    allA_M_allF_mean = {}
    allA_M_allF_std = {}
    ObservedDiff_allF = {}
    for freq_band in allA_C_allFreq.keys():
        allA_C_allF_mean[freq_band] = np.nanmean(allA_C_allFreq[freq_band], axis=0)
        allA_C_allF_std[freq_band] = np.nanstd(allA_C_allFreq[freq_band], axis=0, ddof=1)
        allA_M_allF_mean[freq_band] = np.nanmean(allA_M_allFreq[freq_band], axis=0)
        allA_M_allF_std[freq_band] = np.nanstd(allA_M_allFreq[freq_band], axis=0, ddof=1)
        ObservedDiff_allF[freq_band] = allA_C_allF_mean[freq_band] - allA_M_allF_mean[freq_band]
    # plot each frequency band separately
    for freq_band in allA_C_allF_mean.keys():
        # set fig path and title
        figure_name = analysis_type_str +'_'+ preprocess_str +'_'+ prey_type_str + 'Trials_AllAnimals_Freq'+str(freq_band)+'_' + todays_dt + img_type[0]
        figure_path = os.path.join(plots_dir, figure_name)
        figure_title = 'Z-scored mean change from baseline of {m} in ROI on cuttlefish mantle during tentacle shots, as detected by {at}, Frequency Band {fb}\n Baseline: mean of {m} from t=0 to t={b} seconds \n Prey Movement type: {p}, Pooled across all animals\n Number of catches: {Nc}, Number of misses: {Nm}'.format(m=metric_str, at=analysis_type_str, fb=freq_band, b=str(baseline_len/60), p=prey_type_str, a=animal, Nc=str(allA_C_N[0]), Nm=str(allA_M_N[0]))
        # draw fig
        plt.figure(figsize=(16,16), dpi=200)
        plt.suptitle(figure_title, fontsize=12, y=0.99)
        # subplot: real data and std 
        plt.subplot(2,1,1)
        plt.title('Observed data', fontsize=10, color='grey', style='italic')
        plt.ylabel("Z-scored change from baseline in power")
        plot_xticks = np.arange(0, len(allA_C_allF_mean[freq_band]), step=60)
        plt.xticks(plot_xticks, ['%.1f'%(x/60) for x in plot_xticks])
        plt.ylim(-2.5,3.0)
        #plt.xlim(0,180)
        plt.xlabel("Seconds")
        plt.grid(b=True, which='major', linestyle='-')
        # set colors
        color_meanM = [1.0, 0.0, 0.0, 0.8]
        color_stdM = [0.9, 0.0, 0.0, 0.1]
        color_meanC = [0.0, 0.0, 1.0, 0.8]
        color_stdC = [0.0, 0.0, 0.9, 0.1]
        color_pointwiseP005 = [0.0, 0.5, 0.0, 1.0]
        color_globalP005 = [1.0, 0.65, 0.0, 1.0]
        color_obsDiffMeans = [0.0, 0.0, 0.0, 1.0]
        color_shuffDiffMeans = [0.467, 0.537, 0.6, 1.0]
        # plot mean of catches and misses for each frequency band
        x_frames = range(360)
        UpperBound_M = allA_M_allF_mean[freq_band] + allA_M_allF_std[freq_band]
        LowerBound_M = allA_M_allF_mean[freq_band] - allA_M_allF_std[freq_band]
        UpperBound_C = allA_C_allF_mean[freq_band] + allA_C_allF_std[freq_band]
        LowerBound_C = allA_C_allF_mean[freq_band] - allA_C_allF_std[freq_band]
        plt.plot(allA_M_allF_mean[freq_band], linewidth=2, color=color_meanM, label='Miss, Freq Band '+str(freq_band))
        plt.fill_between(x_frames, UpperBound_M, LowerBound_M, color=color_stdM)
        plt.plot(allA_C_allF_mean[freq_band], linewidth=2, color=color_meanC, label='Catch, Freq Band'+str(freq_band))
        plt.fill_between(x_frames, UpperBound_C, LowerBound_C, color=color_stdC)
        # label events
        ymin, ymax = plt.ylim()
        plt.plot((baseline_len, baseline_len), (ymin, ymax-0.75), 'm--', linewidth=1)
        plt.text(baseline_len, ymax-0.75, "End of \nbaseline period", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='magenta', boxstyle='round,pad=0.35'))
        plt.plot((TGB_bucket, TGB_bucket), (ymin, ymax), 'g--', linewidth=1)
        plt.text(TGB_bucket, ymax-0.25, "Tentacles Go Ballistic\n(TGB)", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='green', boxstyle='round,pad=0.35'))
        plt.legend()
        #subplot: difference of observed means vs shuffled diff of means
        plt.subplot(2,1,2)
        plt.title('Significance of the Difference of means (catch vs miss), Number of shuffles = 20000', fontsize=10, color='grey', style='italic')
        plt.ylabel("Difference of z-scored means in power at frequency band")
        plt.xticks(plot_xticks, ['%.1f'%(x/60) for x in plot_xticks])
        plt.ylim(-2.5,3.0)
        #plt.xlim(0,180)
        plt.xlabel("Seconds")
        plt.grid(b=True, which='major', linestyle='-')
        # plot pointwise p<0.05
        plt.plot(sigUB[freq_band], linestyle='--', color=color_pointwiseP005, label='Pointwise p<0.05 for Freq Band '+str(freq_band))
        plt.plot(sigLB[freq_band], linestyle='--', color=color_pointwiseP005)
        # plot corrected (global) p<0.05
        plt.plot(sigUB_corrected[freq_band], linestyle='--', color=color_globalP005, label='Global p<0.05 for Freq Band '+str(freq_band))
        plt.plot(sigLB_corrected[freq_band], linestyle='--', color=color_globalP005)
        # plot shuffled diff of means
        plt.plot(shuffDiff[freq_band], linewidth=1.5, linestyle='-', color=color_shuffDiffMeans, label='Shuffled diff of means for Freq Band '+str(freq_band))
        # plot real diff of means
        plt.plot(ObservedDiff_allF[freq_band], linewidth=2, linestyle='-', color=color_obsDiffMeans, label='Observed diff of means for Freq Band '+str(freq_band))
        # plot significant time bins as shaded region
        if firstSigFrame[freq_band] is not None:
            sig_x = range(firstSigFrame[freq_band], 360)
            plt.fill_between(sig_x, ObservedDiff_allF[freq_band][firstSigFrame[freq_band]:], sigUB[freq_band][firstSigFrame[freq_band]:], color='cyan', alpha=0.3)
            plt.plot((firstSigFrame[freq_band], firstSigFrame[freq_band]), (ymin, ymax-0.75), 'c--', linewidth=1)
            plt.text(firstSigFrame[freq_band], ymax-0.75, "Difference between \n catches and misses becomes \nsignificant at {s:.2f} seconds after TGB".format(s=(firstSigFrame[freq_band]/60)-3), fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='cyan', boxstyle='round,pad=0.35'))
        # label events
        ymin, ymax = plt.ylim()
        plt.plot((baseline_len, baseline_len), (ymin, ymax-0.75), 'm--', linewidth=1)
        plt.text(baseline_len, ymax-0.75, "End of \nbaseline period", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='magenta', boxstyle='round,pad=0.35'))
        plt.plot((TGB_bucket, TGB_bucket), (ymin, ymax), 'g--', linewidth=1)
        plt.text(TGB_bucket, ymax-0.25, "Tentacles Go Ballistic\n(TGB)", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='green', boxstyle='round,pad=0.35'))
        plt.legend(loc='upper left')
        # save and show fig
        plt.savefig(figure_path)
        plt.show(block=False)
        plt.pause(1)
        plt.close()

def plot_allA_allFreq_Zscored_ShuffledDiffMeans_noLabels(analysis_type_str, preprocess_str, metric_str, prey_type_str, catches_dict, misses_dict, sigUB, sigLB, sigUB_corrected, sigLB_corrected, shuffDiff, firstSigFrame, TGB_bucket, baseline_len, plots_dir, todays_dt): 
    img_type = ['.png', '.pdf']
    ### POOL ACROSS ANIMALS ### 
    allA_C_allFreq = {}
    allA_C_N = {}
    allA_M_allFreq = {}
    allA_M_N = {}
    for animal in catches_dict.keys():
        for freq_band in catches_dict[animal].keys():
            thisA_C_N = len(catches_dict[animal][freq_band])
            if thisA_C_N != 0:
                allA_C_N[freq_band] = allA_C_N.setdefault(freq_band,0) + thisA_C_N
                for trial in catches_dict[animal][freq_band]:
                    allA_C_allFreq.setdefault(freq_band,[]).append(trial)
    for animal in misses_dict.keys():
        for freq_band in misses_dict[animal].keys():
            thisA_M_N = len(misses_dict[animal][freq_band])
            if thisA_M_N != 0:
                allA_M_N[freq_band] = allA_M_N.setdefault(freq_band,0) + thisA_M_N
                for trial in misses_dict[animal][freq_band]:
                    allA_M_allFreq.setdefault(freq_band,[]).append(trial)
    allA_C_allF_mean = {}
    allA_C_allF_std = {}
    allA_M_allF_mean = {}
    allA_M_allF_std = {}
    ObservedDiff_allF = {}
    for freq_band in allA_C_allFreq.keys():
        allA_C_allF_mean[freq_band] = np.nanmean(allA_C_allFreq[freq_band], axis=0)
        allA_C_allF_std[freq_band] = np.nanstd(allA_C_allFreq[freq_band], axis=0, ddof=1)
        allA_M_allF_mean[freq_band] = np.nanmean(allA_M_allFreq[freq_band], axis=0)
        allA_M_allF_std[freq_band] = np.nanstd(allA_M_allFreq[freq_band], axis=0, ddof=1)
        ObservedDiff_allF[freq_band] = allA_C_allF_mean[freq_band] - allA_M_allF_mean[freq_band]
    # plot each frequency band separately
    for freq_band in allA_C_allF_mean.keys():
        # set fig path and title
        figure_name = analysis_type_str +'_'+ preprocess_str +'_'+ prey_type_str + 'Trials_AllAnimals_Freq'+str(freq_band)+'_' + todays_dt + img_type[0]
        figure_path = os.path.join(plots_dir, figure_name)
        figure_title = 'Z-scored mean change from baseline of {m} in ROI on cuttlefish mantle during tentacle shots, as detected by {at}, Frequency Band {fb}\n Baseline: mean of {m} from t=0 to t={b} seconds \n Prey Movement type: {p}, Pooled across all animals\n Number of catches: {Nc}, Number of misses: {Nm}'.format(m=metric_str, at=analysis_type_str, fb=freq_band, b=str(baseline_len/60), p=prey_type_str, a=animal, Nc=str(allA_C_N[0]), Nm=str(allA_M_N[0]))
        # draw fig
        plt.figure(figsize=(16,16), dpi=200)
        plt.suptitle(figure_title, fontsize=12, y=0.99)
        # subplot: real data and std 
        plt.subplot(2,1,1)
        plt.title('Observed data', fontsize=10, color='grey', style='italic')
        plt.ylabel("Z-scored change from baseline in power")
        plot_xticks = np.arange(0, len(allA_C_allF_mean[freq_band]), step=60)
        plt.xticks(plot_xticks, ['%.1f'%(x/60) for x in plot_xticks])
        plt.ylim(-2.5,3.0)
        #plt.xlim(0,180)
        plt.xlabel("Seconds")
        plt.grid(b=True, which='major', linestyle='-')
        # set colors
        color_meanM = [1.0, 0.0, 0.0, 0.8]
        color_stdM = [0.9, 0.0, 0.0, 0.1]
        color_meanC = [0.0, 0.0, 1.0, 0.8]
        color_stdC = [0.0, 0.0, 0.9, 0.1]
        color_pointwiseP005 = [0.0, 0.5, 0.0, 1.0]
        color_globalP005 = [1.0, 0.65, 0.0, 1.0]
        color_obsDiffMeans = [0.0, 0.0, 0.0, 1.0]
        color_shuffDiffMeans = [0.467, 0.537, 0.6, 1.0]
        # plot mean of catches and misses for each frequency band
        x_frames = range(360)
        UpperBound_M = allA_M_allF_mean[freq_band] + allA_M_allF_std[freq_band]
        LowerBound_M = allA_M_allF_mean[freq_band] - allA_M_allF_std[freq_band]
        UpperBound_C = allA_C_allF_mean[freq_band] + allA_C_allF_std[freq_band]
        LowerBound_C = allA_C_allF_mean[freq_band] - allA_C_allF_std[freq_band]
        plt.plot(allA_M_allF_mean[freq_band], linewidth=2, color=color_meanM, label='Miss, Freq Band '+str(freq_band))
        plt.fill_between(x_frames, UpperBound_M, LowerBound_M, color=color_stdM)
        plt.plot(allA_C_allF_mean[freq_band], linewidth=2, color=color_meanC, label='Catch, Freq Band'+str(freq_band))
        plt.fill_between(x_frames, UpperBound_C, LowerBound_C, color=color_stdC)
        # label events
        ymin, ymax = plt.ylim()
        plt.plot((baseline_len, baseline_len), (ymin, ymax-0.75), 'm--', linewidth=1)
        #plt.text(baseline_len, ymax-0.75, "End of \nbaseline period", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='magenta', boxstyle='round,pad=0.35'))
        plt.plot((TGB_bucket, TGB_bucket), (ymin, ymax), 'g--', linewidth=1)
        #plt.text(TGB_bucket, ymax-0.25, "Tentacles Go Ballistic\n(TGB)", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='green', boxstyle='round,pad=0.35'))
        plt.legend()
        #subplot: difference of observed means vs shuffled diff of means
        plt.subplot(2,1,2)
        plt.title('Significance of the Difference of means (catch vs miss), Number of shuffles = 20000', fontsize=10, color='grey', style='italic')
        plt.ylabel("Difference of z-scored means in power at frequency band")
        plt.xticks(plot_xticks, ['%.1f'%(x/60) for x in plot_xticks])
        plt.ylim(-2.5,3.0)
        #plt.xlim(0,180)
        plt.xlabel("Seconds")
        plt.grid(b=True, which='major', linestyle='-')
        # plot pointwise p<0.05
        plt.plot(sigUB[freq_band], linestyle='--', color=color_pointwiseP005, label='Pointwise p<0.05 for Freq Band '+str(freq_band))
        plt.plot(sigLB[freq_band], linestyle='--', color=color_pointwiseP005)
        # plot corrected (global) p<0.05
        plt.plot(sigUB_corrected[freq_band], linestyle='--', color=color_globalP005, label='Global p<0.05 for Freq Band '+str(freq_band))
        plt.plot(sigLB_corrected[freq_band], linestyle='--', color=color_globalP005)
        # plot shuffled diff of means
        plt.plot(shuffDiff[freq_band], linewidth=1.5, linestyle='-', color=color_shuffDiffMeans, label='Shuffled diff of means for Freq Band '+str(freq_band))
        # plot real diff of means
        plt.plot(ObservedDiff_allF[freq_band], linewidth=2, linestyle='-', color=color_obsDiffMeans, label='Observed diff of means for Freq Band '+str(freq_band))
        # plot significant time bins as shaded region
        if firstSigFrame[freq_band] is not None:
            sig_x = range(firstSigFrame[freq_band], 360)
            plt.fill_between(sig_x, ObservedDiff_allF[freq_band][firstSigFrame[freq_band]:], sigUB[freq_band][firstSigFrame[freq_band]:], color='cyan', alpha=0.3)
            plt.plot((firstSigFrame[freq_band], firstSigFrame[freq_band]), (ymin, ymax-0.75), 'c--', linewidth=1)
        #plt.text(firstSigFrame[freq_band], ymax-0.75, "Difference between \n catches and misses becomes \nsignificant at {s:.2f} seconds after TGB".format(s=(firstSigFrame[freq_band]/60)-3), fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='cyan', boxstyle='round,pad=0.35'))
        # label events
        ymin, ymax = plt.ylim()
        plt.plot((baseline_len, baseline_len), (ymin, ymax-0.75), 'm--', linewidth=1)
        #plt.text(baseline_len, ymax-0.75, "End of \nbaseline period", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='magenta', boxstyle='round,pad=0.35'))
        plt.plot((TGB_bucket, TGB_bucket), (ymin, ymax), 'g--', linewidth=1)
        #plt.text(TGB_bucket, ymax-0.25, "Tentacles Go Ballistic\n(TGB)", fontsize='small', ha='center', bbox=dict(facecolor='white', edgecolor='green', boxstyle='round,pad=0.35'))
        plt.legend(loc='upper left')
        # save and show fig
        plt.savefig(figure_path)
        plt.show(block=False)
        plt.pause(1)
        plt.close()

###
visualize_random_traces = False
plot_shuffle_tests = False

### BEGIN ANALYSIS ###
# grab today's date
now = datetime.datetime.now()
todays_datetime = datetime.datetime.today().strftime('%Y%m%d-%H%M%S')
cwd = os.getcwd()
# source data and output locations
data_folder = r'C:\Users\taunsquared\Dropbox\CuttleShuttle\analysis\WoodsHoleAnalysis\data'
plots_folder = r'C:\Users\taunsquared\Dropbox\CuttleShuttle\analysis\WoodsHoleAnalysis\plots'
# from data folder, collect all binary files with power-at-freq-band data
all_data = glob.glob(data_folder + os.sep + "*.npy")

########################################################
### ------ ORGANIZE DATA ------ ###
########################################################
# categorize tentacle shots according to prey movement
TGB_natural = []
TGB_patterned = []
TGB_causal = []
TGB_daily = {}
for TGB_file in all_data: 
    trial_date = os.path.basename(TGB_file).split('_')[2]
    sorted_by_session = TGB_daily.setdefault(trial_date,[]).append(TGB_file)
    trial_datetime = datetime.datetime.strptime(trial_date, '%Y-%m-%d')
    if trial_datetime < datetime.datetime(2014, 9, 13, 0, 0):
        TGB_natural.append(TGB_file)
    elif trial_datetime > datetime.datetime(2014, 10, 18, 0, 0):
        TGB_causal.append(TGB_file)
    else: 
        TGB_patterned.append(TGB_file)

# organize power-at-frequency-band data
# categorize daily sessions by animal
all_TS_daily = {}
all_catches_daily = {}
all_misses_daily = {}
for session_date in TGB_daily:
    all_TS_daily[session_date] = categorize_by_animal(TGB_daily[session_date])
    all_catches_daily[session_date], all_misses_daily[session_date] = categorize_by_animal_catchVmiss(TGB_daily[session_date])

# collect all power-at-frequency-band data and categorize by animal
all_TS = categorize_by_animal(all_data)
# collect all power-at-frequency-band data and categorize by animal and type (catch vs miss)
all_catches, all_misses = categorize_by_animal_catchVmiss(all_data)
# organize by prey type
all_raw = [all_catches, all_misses]
# time bin for moment tentacles go ballistic
TGB_bucket_raw = 180

########################################################
### ------ DATA NORMALIZATION/STANDARDIZATION ------ ###
########################################################
# baseline subtraction
baseline_frames = 150 #frames
# baseline subtract, all TS
dailyTS_baseSub = {}
for session_date in all_TS_daily:
    dailyTS_baseSub[session_date] = baseSub_powerAtFreq(all_TS_daily[session_date], 'all', baseline_frames)
allTS_baseSub = baseSub_powerAtFreq(all_TS, 'all', baseline_frames)
# baseline subtract, catch vs miss
dailyCatches_baseSub = {}
dailyMisses_baseSub = {}
for session_date in all_catches_daily:
    dailyCatches_baseSub[session_date] = baseSub_powerAtFreq(all_catches_daily[session_date], 'all', baseline_frames)
for session_date in all_misses_daily:
    dailyMisses_baseSub[session_date] = baseSub_powerAtFreq(all_misses_daily[session_date], 'all', baseline_frames)
allCatches_baseSub = baseSub_powerAtFreq(all_catches, 'all', baseline_frames)
allMisses_baseSub = baseSub_powerAtFreq(all_misses, 'all', baseline_frames)
# zscore each animal so that I can pool all trials into a "superanimal"
allTS_baseSub_Zscored = zScored_powerAtFreq('frame', allTS_baseSub, allTS_baseSub)
allCatches_baseSub_Zscored_Frame = zScored_powerAtFreq('frame', allCatches_baseSub, allTS_baseSub)
allMisses_baseSub_Zscored_Frame = zScored_powerAtFreq('frame', allMisses_baseSub, allTS_baseSub)
allTS_baseSub_Zscored_Frame_Sess = zScored_powerAtFreq('session', allTS_baseSub, allTS_baseSub)
allCatches_baseSub_Zscored_Sess = zScored_powerAtFreq('session', allCatches_baseSub, allTS_baseSub)
allMisses_baseSub_Zscored_Sess = zScored_powerAtFreq('session', allMisses_baseSub, allTS_baseSub)
# zscore daily sessions for each animal to characterize session dynamics
dailyTS_baseSub_Zscored_Sess = {}
for session_date in dailyTS_baseSub:
    dailyTS_baseSub_Zscored_Sess[session_date] = zScored_powerAtFreq('session', dailyTS_baseSub[session_date], dailyTS_baseSub[session_date])
dailyCatches_baseSub_Zscored_Sess = {}
dailyMisses_baseSub_Zscored_Sess = {}
for session_date in dailyCatches_baseSub:
    dailyCatches_baseSub_Zscored_Sess[session_date] = zScored_powerAtFreq('session', dailyCatches_baseSub[session_date], dailyTS_baseSub[session_date])
for session_date in dailyMisses_baseSub:
    dailyMisses_baseSub_Zscored_Sess[session_date] = zScored_powerAtFreq('session', dailyMisses_baseSub[session_date], dailyTS_baseSub[session_date])

#######################################################
### ------------ PLOT THE ZSCORED DATA ------------ ###
#######################################################

## individual animals
plot_indiv_animals_each_freq('ProcessCuttlePython', 'Zscored_Frame_BaseSub', 'power at frequency band', 'all', allCatches_baseSub_Zscored_Frame, allMisses_baseSub_Zscored_Frame, TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)
plot_indiv_animals_each_freq('ProcessCuttlePython', 'Zscored_Sess_BaseSub', 'power at frequency band', 'all', allCatches_baseSub_Zscored_Sess, allMisses_baseSub_Zscored_Sess, TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)

# sanity check
for session_date in dailyTS_baseSub:
    plot_indiv_animals_each_freq('ProcessCuttlePython', 'BaseSub', 'power at frequency band', 'all '+session_date, dailyCatches_baseSub[session_date], dailyMisses_baseSub[session_date], TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)
    plot_indiv_animals_each_freq('ProcessCuttlePython', 'Zscored_Sess_Basesub', 'power at frequency band', 'all '+session_date, dailyCatches_baseSub_Zscored_Sess[session_date], dailyMisses_baseSub_Zscored_Sess[session_date], TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)

########################################################
### -------- SHUFFLE TESTS FOR SIGNIFICANCE -------- ###
########################################################
No_of_Shuffles = 20000

### POOL ACROSS ALL ANIMALS, make a shuffle test of every frame
# zscored by frame
allA_allFreq_Z_byFrame_C, allA_allFreq_Z_byFrame_C_N, allA_allFreq_Z_byFrame_M, allA_allFreq_Z_byFrame_M_N = pool_acrossA_keepTemporalStructure_eachFreq(allCatches_baseSub_Zscored_Frame, allMisses_baseSub_Zscored_Frame, 0, -1, "all")
Z_power_allFreq_byFrame = {}
for freq_band in range(7):
    Z_power_allFreq_byFrame[freq_band] = {}
    for frame in range(360):
        # collect all power scores for each frame
        Z_power_allFreq_byFrame[freq_band][frame] = {'catch':[], 'miss':[], 'SPerf': None, 'pval': None, 'mean': None}
        for trial in allA_allFreq_Z_byFrame_C[freq_band]:
            Z_power_allFreq_byFrame[freq_band][frame]['catch'].append(trial[frame])
        for trial in allA_allFreq_Z_byFrame_M[freq_band]:
            Z_power_allFreq_byFrame[freq_band][frame]['miss'].append(trial[frame])
        # shuffle test each time bin
        Z_power_allFreq_byFrame[freq_band][frame]['SPerf'], Z_power_allFreq_byFrame[freq_band][frame]['pval'], Z_power_allFreq_byFrame[freq_band][frame]['mean'] = shuffle_test(Z_power_allFreq_byFrame[freq_band][frame]['catch'], Z_power_allFreq_byFrame[freq_band][frame]['miss'], No_of_Shuffles, 'AllCatches-Zscored-Frame'+str(frame)+'-Freq'+str(freq_band), 'AllMisses-Zscored-Frame'+str(frame)+'-Freq'+str(freq_band), allA_allFreq_Z_byFrame_C_N, allA_allFreq_Z_byFrame_M_N, plot_shuffle_tests, plots_folder, todays_datetime)

# zscored by entire dataset
allA_allFreq_ZSess_byFrame_C, allA_allFreq_ZSess_byFrame_C_N, allA_allFreq_ZSess_byFrame_M, allA_allFreq_ZSess_byFrame_M_N = pool_acrossA_keepTemporalStructure_eachFreq(allCatches_baseSub_Zscored_Sess, allMisses_baseSub_Zscored_Sess, 0, -1, "all")
ZSess_power_allFreq_byFrame = {}
for freq_band in range(7):
    ZSess_power_allFreq_byFrame[freq_band] = {}
    for frame in range(360):
        # collect all edge scores for each time bin
        ZSess_power_allFreq_byFrame[freq_band][frame] = {'catch':[], 'miss':[], 'SPerf': None, 'pval': None, 'mean': None}
        for trial in allA_allFreq_ZSess_byFrame_C[freq_band]:
            ZSess_power_allFreq_byFrame[freq_band][frame]['catch'].append(trial[frame])
        for trial in allA_allFreq_ZSess_byFrame_M[freq_band]:
            ZSess_power_allFreq_byFrame[freq_band][frame]['miss'].append(trial[frame])
        # shuffle test each time bin
        ZSess_power_allFreq_byFrame[freq_band][frame]['SPerf'], ZSess_power_allFreq_byFrame[freq_band][frame]['pval'], ZSess_power_allFreq_byFrame[freq_band][frame]['mean'] = shuffle_test(ZSess_power_allFreq_byFrame[freq_band][frame]['catch'], ZSess_power_allFreq_byFrame[freq_band][frame]['miss'], No_of_Shuffles, 'AllCatches-ZscoredSess-Frame'+str(frame)+'-Freq'+str(freq_band), 'AllMisses-ZscoredSess-Frame'+str(frame)+'-Freq'+str(freq_band), allA_allFreq_ZSess_byFrame_C_N, allA_allFreq_ZSess_byFrame_M_N, plot_shuffle_tests, plots_folder, todays_datetime)

#######################################################
### -- CALCULATE UPPER & LOWER BOUNDS FOR P<0.05 -- ###
#######################################################
# pointwise p<0.05 bounds
UB_pointwise = 97.5
LB_pointwise = 2.5
pw005sig_UB = {}
pw005sig_LB = {}
pw005sig_Zsess_UB = {}
pw005sig_Zsess_LB = {}
for freq_band in Z_power_allFreq_byFrame.keys():
    pw005sig_UB[freq_band], pw005sig_LB[freq_band] = find_bounds_for_sig(Z_power_allFreq_byFrame[freq_band], UB_pointwise, LB_pointwise)
    pw005sig_Zsess_UB[freq_band], pw005sig_Zsess_LB[freq_band] = find_bounds_for_sig(ZSess_power_allFreq_byFrame[freq_band], UB_pointwise, LB_pointwise)

# collect shuffled mean of each frame
shuff_DiffMeans = {}
for freq_band in Z_power_allFreq_byFrame.keys():
    for frame in sorted(Z_power_allFreq_byFrame[freq_band].keys()):
        shuff_DiffMeans.setdefault(freq_band,[]).append(Z_power_allFreq_byFrame[freq_band][frame]['mean'])

shuff_ZSess_DiffMeans = {}
for freq_band in ZSess_power_allFreq_byFrame.keys():
    for frame in sorted(ZSess_power_allFreq_byFrame[freq_band].keys()):
        shuff_ZSess_DiffMeans.setdefault(freq_band,[]).append(ZSess_power_allFreq_byFrame[freq_band][frame]['mean'])

#######################################################
### -- CALCULATE REAL/OBSERVED DIFF OF MEANS -- ###
#######################################################
# by frame
allA_allC_Z_allFreq = {}
allA_allM_Z_allFreq = {}
for animal in allCatches_baseSub_Zscored_Frame.keys():
    for freq_band in allCatches_baseSub_Zscored_Frame[animal].keys():
        for trial in allCatches_baseSub_Zscored_Frame[animal][freq_band]:
            allA_allC_Z_allFreq.setdefault(freq_band,[]).append(trial)
        for trial in allMisses_baseSub_Zscored_Frame[animal][freq_band]:
            allA_allM_Z_allFreq.setdefault(freq_band,[]).append(trial)
allA_allC_Z_allFreq_mean = {}
allA_allM_Z_allFreq_mean = {}
Observed_DiffMeans_allFreq = {}
for freq_band in allA_allC_Z_allFreq.keys():
    allA_allC_Z_allFreq_mean[freq_band] = np.nanmean(allA_allC_Z_allFreq[freq_band], axis=0)
    allA_allM_Z_allFreq_mean[freq_band] = np.nanmean(allA_allM_Z_allFreq[freq_band], axis=0)
    Observed_DiffMeans_allFreq[freq_band] = allA_allC_Z_allFreq_mean[freq_band] - allA_allM_Z_allFreq_mean[freq_band]
# by session
allA_allC_ZSess_allFreq = {}
allA_allM_ZSess_allFreq = {}
for animal in allCatches_baseSub_Zscored_Sess:
    for freq_band in allCatches_baseSub_Zscored_Sess[animal]:
        for trial in allCatches_baseSub_Zscored_Sess[animal][freq_band]:
            allA_allC_ZSess_allFreq.setdefault(freq_band,[]).append(trial)
        for trial in allMisses_baseSub_Zscored_Sess[animal][freq_band]:
            allA_allM_ZSess_allFreq.setdefault(freq_band,[]).append(trial)
allA_allC_ZSess_allFreq_mean = {}
allA_allM_ZSess_allFreq_mean = {}
Observed_DiffMeans_ZSess_allFreq = {}
for freq_band in allA_allC_ZSess_allFreq.keys():
    allA_allC_ZSess_allFreq_mean[freq_band] = np.nanmean(allA_allC_ZSess_allFreq[freq_band], axis=0)
    allA_allM_ZSess_allFreq_mean[freq_band] = np.nanmean(allA_allM_ZSess_allFreq[freq_band], axis=0)
    Observed_DiffMeans_ZSess_allFreq[freq_band] = allA_allC_ZSess_allFreq_mean[freq_band] - allA_allM_ZSess_allFreq_mean[freq_band]

####################################################################
### -- GENERATE RANDOM TRACES TO CORRECT THRESHOLD FOR P<0.05 -- ###
####################################################################
No_of_random_traces = 1000
## zscored by frame
shuffledDiffMeans_ZFrame_allFreq = {}
for freq_band in Z_power_allFreq_byFrame.keys():
    shuffledDiffMeans_ZFrame_allFreq[freq_band] = {}
    for frame in Z_power_allFreq_byFrame[freq_band]:
        shuffledDiffMeans_ZFrame_allFreq[freq_band][frame] = gen_shuffled_traces(Z_power_allFreq_byFrame[freq_band][frame]['catch'], Z_power_allFreq_byFrame[freq_band][frame]['miss'], No_of_random_traces, len(Z_power_allFreq_byFrame[freq_band][frame]['catch']), len(Z_power_allFreq_byFrame[freq_band][frame]['miss']))
# convert to arrays for plotting
shuffMeans_traces_allFreq = {}
shuffMeans_traces_N = len(shuffledDiffMeans_ZFrame_allFreq[0][0])
for st in range(shuffMeans_traces_N):
    for freq_band in shuffledDiffMeans_ZFrame_allFreq.keys():
        this_trace = []
        for frame in shuffledDiffMeans_ZFrame_allFreq[freq_band].keys():
            this_trace.append(shuffledDiffMeans_ZFrame_allFreq[freq_band][frame][st][0])
        shuffMeans_traces_allFreq.setdefault(freq_band,[]).append(this_trace)
for freq_band in shuffMeans_traces_allFreq.keys():
    shuffMeans_traces_allFreq[freq_band] = np.array(shuffMeans_traces_allFreq[freq_band])
## zscored by entire dataset
shuffledDiffMeans_ZSess_byFrame = {}
for freq_band in ZSess_power_allFreq_byFrame.keys():
    shuffledDiffMeans_ZSess_byFrame[freq_band] = {}
    for frame in ZSess_power_allFreq_byFrame[freq_band]:
        shuffledDiffMeans_ZSess_byFrame[freq_band][frame] = gen_shuffled_traces(ZSess_power_allFreq_byFrame[freq_band][frame]['catch'], ZSess_power_allFreq_byFrame[freq_band][frame]['miss'], No_of_random_traces, len(ZSess_power_allFreq_byFrame[freq_band][frame]['catch']), len(ZSess_power_allFreq_byFrame[freq_band][frame]['miss']))
# convert to arrays for plotting
shuffMeans_ZSess_traces_allFreq = {}
shuffMeans_ZSess_traces_allFreq_N = len(shuffledDiffMeans_ZSess_byFrame[0][0])
for st in range(shuffMeans_ZSess_traces_allFreq_N):
    for freq_band in shuffledDiffMeans_ZSess_byFrame.keys():
        this_trace = []
        for frame in shuffledDiffMeans_ZSess_byFrame[freq_band].keys():
            this_trace.append(shuffledDiffMeans_ZSess_byFrame[freq_band][frame][st][0])
        shuffMeans_ZSess_traces_allFreq.setdefault(freq_band,[]).append(this_trace)
for freq_band in shuffMeans_ZSess_traces_allFreq.keys():
    shuffMeans_ZSess_traces_allFreq[freq_band] = np.array(shuffMeans_ZSess_traces_allFreq[freq_band])
# correct the p<0.05 bounds
UB_corrected = 99.995
LB_corrected = 0.005
global005sig_UB = {}
global005sig_LB = {}
global005sig_ZSess_UB = {}
global005sig_ZSess_LB = {}
for freq_band in Z_power_allFreq_byFrame.keys():
    global005sig_UB[freq_band], global005sig_LB[freq_band] = find_bounds_for_sig(Z_power_allFreq_byFrame[freq_band], UB_corrected, LB_corrected)
    global005sig_ZSess_UB[freq_band], global005sig_ZSess_LB[freq_band] = find_bounds_for_sig(ZSess_power_allFreq_byFrame[freq_band], UB_corrected, LB_corrected)
# check how many of these random traces violate the p<0.05 generated by frame-wise shuffle test
N_violations_UBcorrected = {}
N_violations_LBcorrected = {}
N_violations_ZSess_UBcorrected = {}
N_violations_ZSess_LBcorrected = {}
for freq_band in shuffMeans_traces_allFreq.keys():
    N_violations_UBcorrected[freq_band], N_violations_LBcorrected[freq_band] = check_violations_sigBounds(shuffMeans_traces_allFreq[freq_band], global005sig_UB[freq_band], global005sig_LB[freq_band])
    N_violations_ZSess_UBcorrected[freq_band], N_violations_ZSess_LBcorrected[freq_band] = check_violations_sigBounds(shuffMeans_ZSess_traces_allFreq[freq_band], global005sig_ZSess_UB[freq_band], global005sig_ZSess_LB[freq_band])
# find where observed data crosses corrected pointwise bounds for first time just before crossing global bounds
firstFrame_globalP005sig = {}
firstFrame_P005sig = {}
for freq_band in Observed_DiffMeans_allFreq.keys():
    for frame in range(len(Observed_DiffMeans_allFreq[freq_band])):
        if Observed_DiffMeans_allFreq[freq_band][frame]>global005sig_UB[freq_band][frame] or Observed_DiffMeans_allFreq[freq_band][frame]<global005sig_LB[freq_band][frame]:
            firstFrame_globalP005sig[freq_band] = frame
            break
    if freq_band in firstFrame_globalP005sig.keys() and firstFrame_globalP005sig[freq_band] != len(Observed_DiffMeans_allFreq[freq_band])-1:
        backwards_from_first_global_crossing = np.flip(range(firstFrame_globalP005sig[freq_band]))
        for frame in backwards_from_first_global_crossing:
            if Observed_DiffMeans_allFreq[freq_band][firstFrame_globalP005sig[freq_band]]>global005sig_UB[freq_band][frame] and Observed_DiffMeans_allFreq[freq_band][frame]<pw005sig_UB[freq_band][frame]:
                firstFrame_P005sig[freq_band] = frame + 1
                break
            elif Observed_DiffMeans_allFreq[freq_band][firstFrame_globalP005sig[freq_band]]<global005sig_LB[freq_band][frame] and Observed_DiffMeans_allFreq[freq_band][frame]>pw005sig_LB[freq_band][frame]:
                firstFrame_P005sig[freq_band] = frame + 1
                break
    else:
        firstFrame_P005sig[freq_band] = None
firstFrame_ZSess_globalP005sig = {}
firstFrame_ZSess_P005sig = {}
for freq_band in Observed_DiffMeans_ZSess_allFreq.keys():
    for frame in range(len(Observed_DiffMeans_ZSess_allFreq[freq_band])):
        if Observed_DiffMeans_ZSess_allFreq[freq_band][frame]>global005sig_ZSess_UB[freq_band][frame] or Observed_DiffMeans_ZSess_allFreq[freq_band][frame]<global005sig_ZSess_LB[freq_band][frame]:
            firstFrame_ZSess_globalP005sig[freq_band] = frame
            break
    if freq_band in firstFrame_ZSess_globalP005sig.keys() and firstFrame_ZSess_globalP005sig[freq_band] != len(Observed_DiffMeans_allFreq[freq_band])-1:
        backwards_from_first_global_crossing = np.flip(range(firstFrame_ZSess_globalP005sig[freq_band]))
        for frame in backwards_from_first_global_crossing:
            if Observed_DiffMeans_ZSess_allFreq[freq_band][firstFrame_ZSess_globalP005sig[freq_band]]>global005sig_ZSess_UB[freq_band][frame] and Observed_DiffMeans_allFreq[freq_band][frame]<pw005sig_Zsess_UB[freq_band][frame]:
                firstFrame_ZSess_P005sig[freq_band] = frame + 1
                break
            elif Observed_DiffMeans_ZSess_allFreq[freq_band][firstFrame_ZSess_globalP005sig[freq_band]]<global005sig_ZSess_LB[freq_band][frame] and Observed_DiffMeans_allFreq[freq_band][frame]>pw005sig_Zsess_LB[freq_band][frame]:
                firstFrame_ZSess_P005sig[freq_band] = frame + 1
                break
    else:
        firstFrame_ZSess_P005sig[freq_band] = None
# visualize
if visualize_random_traces == True:
    for freq_band in shuffMeans_traces_allFreq.keys():
        for shuff_trace in shuffMeans_traces_allFreq[freq_band]:
            plt.plot(shuff_trace, alpha=0.1)
        plt.plot(pw005sig_UB[freq_band], 'g--')
        plt.plot(pw005sig_LB[freq_band], 'g--')
        plt.plot(global005sig_UB[freq_band], 'm--')
        plt.plot(global005sig_LB[freq_band], 'm--')
        plt.plot(shuff_DiffMeans[freq_band], 'b--')
        plt.plot(Observed_DiffMeans_allFreq[freq_band], 'k-')
        plt.show()
        for shuff_trace in shuffMeans_ZSess_traces_allFreq[freq_band]:
            plt.plot(shuff_trace, alpha=0.1)
        plt.plot(pw005sig_Zsess_UB[freq_band], 'g--')
        plt.plot(pw005sig_Zsess_LB[freq_band], 'g--')
        plt.plot(global005sig_ZSess_UB[freq_band], 'm--')
        plt.plot(global005sig_ZSess_LB[freq_band], 'm--')
        plt.plot(shuff_ZSess_DiffMeans[freq_band], 'b--')
        plt.plot(Observed_DiffMeans_ZSess_allFreq[freq_band], 'k-')
        plt.show()

#######################################################
### ------------ PLOT THE SHUFFLE DATA ------------ ###
#######################################################
### POOL ACROSS ANIMALS
plot_allA_allFreq_Zscored_ShuffledDiffMeans('ProcessCuttlePython', 'Zscored_baseSub', 'power at frequency', 'all', allCatches_baseSub_Zscored_Frame, allMisses_baseSub_Zscored_Frame, pw005sig_UB, pw005sig_LB, global005sig_UB, global005sig_LB, shuff_DiffMeans, firstFrame_P005sig, TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)
# this one is for the paper
plot_allA_allFreq_Zscored_ShuffledDiffMeans('ProcessCuttlePython', 'ZscoredSess_baseSub', 'power at frequency', 'all', allCatches_baseSub_Zscored_Sess, allMisses_baseSub_Zscored_Sess, pw005sig_Zsess_UB, pw005sig_Zsess_LB, global005sig_ZSess_UB, global005sig_ZSess_LB, shuff_ZSess_DiffMeans, firstFrame_ZSess_P005sig, TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)
# without labels
plot_allA_allFreq_Zscored_ShuffledDiffMeans_noLabels('ProcessCuttlePython_noLabel', 'ZscoredSess_baseSub', 'power at frequency', 'all', allCatches_baseSub_Zscored_Sess, allMisses_baseSub_Zscored_Sess, pw005sig_Zsess_UB, pw005sig_Zsess_LB, global005sig_ZSess_UB, global005sig_ZSess_LB, shuff_ZSess_DiffMeans, firstFrame_ZSess_P005sig, TGB_bucket_raw, baseline_frames, plots_folder, todays_datetime)



# FIN